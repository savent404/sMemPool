        -:    0:Source:/home/savent/git/sMemPool/include/internal/utils.hxx
        -:    0:Programs:2
        -:    1:#pragma once
        -:    2:
        -:    3:#include <stddef.h>
        -:    4:
        -:    5:namespace smem {
        -:    6:
        -:    7:struct debug {
    #####:    8:  static void _assert(bool t) {
    #####:    9:    if (!t)
    #####:   10:      while (1) {
        -:   11:      }
    #####:   12:  }
        -:   13:};
        -:   14:
        -:   15:namespace math {
        -:   16:
     1308:   17:inline int align_size(int size, int align) {
     1308:   18:  return (size + align - 1) & (~(align - 1));
        -:   19:}
        -:   20:
        -:   21:inline void* align_forward(void* addr, int align) {
        -:   22:  return reinterpret_cast<void*>(
        -:   23:      (reinterpret_cast<size_t>(addr) + (align - 1)) & (~(align - 1)));
        -:   24:}
        -:   25:
     2803:   26:inline int align_forward_adjust(const void* addr, int align) {
     2803:   27:  int adj =
     2803:   28:      align - (reinterpret_cast<size_t>(addr) & static_cast<size_t>(align - 1));
     2803:   29:  return adj == align ? 0 : adj;
        -:   30:}
        -:   31:
     1498:   32:inline int align_forwrad_adjust_with_header(const void* addr, int align,
        -:   33:                                            int header_size) {
     1498:   34:  int adj = align_forward_adjust(addr, align);
     1498:   35:  int neededspace = header_size;
        -:   36:
     1498:   37:  if (adj < neededspace) {
     1498:   38:    neededspace -= adj;
     1498:   39:    adj += align * (neededspace / align);
     1498:   40:    if (neededspace & (align - 1)) adj += align;
        -:   41:  }
     1498:   42:  debug::_assert(adj < 100);
     1498:   43:  return adj;
        -:   44:}
        -:   45:
     3860:   46:inline void* add(void* base, int offset) {
     3860:   47:  return reinterpret_cast<void*>(reinterpret_cast<size_t>(base) + offset);
        -:   48:}
        -:   49:
     3419:   50:inline void* sub(void* base, int sub_offset) {
     3419:   51:  return reinterpret_cast<void*>(reinterpret_cast<size_t>(base) - sub_offset);
        -:   52:}
        -:   53:
     1250:   54:inline int sub(void* addr1, void* addr2) {
     1250:   55:  return reinterpret_cast<size_t>(addr1) - reinterpret_cast<size_t>(addr2);
        -:   56:}
        -:   57:
     1250:   58:inline bool eq(void* addr1, void* addr2) { return addr1 == addr2; }
        -:   59:
        -:   60:}  // namespace math
        -:   61:}  // namespace smem
